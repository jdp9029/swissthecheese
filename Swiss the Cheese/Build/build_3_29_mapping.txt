# compiler: R8
# compiler_version: 3.1.66
# min_api: 23
# pg_map_id: aadfd54
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"1.0"}
bitter.jnibridge.JNIBridge -> bitter.jnibridge.JNIBridge:
    1:1:void disableInterfaceProxy(java.lang.Object) -> disableInterfaceProxy
bitter.jnibridge.JNIBridge$a -> bitter.jnibridge.JNIBridge$a:
    java.lang.Object -$$Nest$fgeta(bitter.jnibridge.JNIBridge$a) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputb(bitter.jnibridge.JNIBridge$a,long) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.google.androidgamesdk.ChoreographerCallback$b -> com.google.androidgamesdk.ChoreographerCallback$b:
    void <init>(com.google.androidgamesdk.ChoreographerCallback,com.google.androidgamesdk.ChoreographerCallback$b-IA) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
com.google.androidgamesdk.ChoreographerCallback$b-IA -> a.a:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.google.androidgamesdk.SwappyDisplayManager -> com.google.androidgamesdk.SwappyDisplayManager:
    android.app.Activity -$$Nest$fgetmActivity(com.google.androidgamesdk.SwappyDisplayManager) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.google.androidgamesdk.SwappyDisplayManager$b -> com.google.androidgamesdk.SwappyDisplayManager$b:
    void <init>(com.google.androidgamesdk.SwappyDisplayManager,com.google.androidgamesdk.SwappyDisplayManager$b-IA) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
com.google.androidgamesdk.SwappyDisplayManager$b-IA -> a.b:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.samsung.android.gamesdk.GameSDKManager -> b.a:
    int[] mEmptyIntArrary -> d
    com.samsung.android.gamesdk.IGameSDKService mService -> a
    float mServiceVersion -> c
    com.samsung.android.gamesdk.GameSDKManager$Listener mListener -> b
    20:82:void <init>() -> <init>
    170:179:java.lang.String getVersion() -> a
    528:541:boolean setCpuBoostMode(int) -> b
    554:567:boolean setGpuBoostMode(int) -> c
    700:710:void updateServiceVersion() -> d
com.samsung.android.gamesdk.GameSDKManager$Listener -> b.a$a:
com.unity.androidnotifications.NotificationChannelWrapper -> com.unity.androidnotifications.a:
    int lockscreenVisibility -> j
    java.lang.String group -> k
    boolean enableLights -> e
    boolean enableVibration -> f
    java.lang.String id -> a
    boolean canBypassDnd -> g
    boolean canShowBadge -> h
    java.lang.String name -> b
    int importance -> c
    long[] vibrationPattern -> i
    java.lang.String description -> d
    1086:1086:void <init>() -> <init>
com.unity.androidnotifications.UnityNotificationBackgroundThread -> com.unity.androidnotifications.c:
    java.util.concurrent.LinkedTransferQueue mTasks -> a
    com.unity.androidnotifications.UnityNotificationManager mManager -> c
    java.util.concurrent.ConcurrentHashMap mScheduledNotifications -> b
    int mTasksSinceHousekeeping -> d
    113:124:void <init>(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> <init>
    void -$$Nest$mperformHousekeeping(com.unity.androidnotifications.UnityNotificationBackgroundThread,java.util.Set) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    135:136:void enqueueCancelAllNotifications() -> b
    131:132:void enqueueCancelNotification(int) -> c
    139:140:void enqueueHousekeeping() -> d
    127:128:void enqueueNotification(int,android.app.Notification$Builder,boolean,boolean) -> e
    164:167:boolean executeTask(com.unity.androidnotifications.UnityNotificationManager,com.unity.androidnotifications.UnityNotificationBackgroundThread$Task,java.util.concurrent.ConcurrentHashMap) -> f
    181:186:void loadNotifications() -> g
    173:178:void performHousekeeping(java.util.Set) -> h
    144:160:void run() -> run
com.unity.androidnotifications.UnityNotificationBackgroundThread$CancelAllNotificationsTask -> com.unity.androidnotifications.c$a:
    75:75:void <init>() -> <init>
    78:89:boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$CancelAllNotificationsTask-IA -> com.unity.androidnotifications.b:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity.androidnotifications.UnityNotificationBackgroundThread$CancelNotificationTask -> com.unity.androidnotifications.c$b:
    int notificationId -> a
    59:61:void <init>(int) -> <init>
    65:71:boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$HousekeepingTask -> com.unity.androidnotifications.c$c:
    com.unity.androidnotifications.UnityNotificationBackgroundThread thread -> a
    96:98:void <init>(com.unity.androidnotifications.UnityNotificationBackgroundThread) -> <init>
    102:108:boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$ScheduleNotificationTask -> com.unity.androidnotifications.c$d:
    android.app.Notification$Builder notificationBuilder -> b
    boolean isCustomized -> c
    int notificationId -> a
    boolean isNew -> d
    28:33:void <init>(int,android.app.Notification$Builder,boolean,boolean) -> <init>
    37:52:boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$Task -> com.unity.androidnotifications.c$e:
    17:17:void <init>() -> <init>
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$Task-IA -> com.unity.androidnotifications.d:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity.androidnotifications.UnityNotificationManager -> com.unity.androidnotifications.UnityNotificationManager:
    android.content.Context mContext -> a
    java.util.concurrent.ConcurrentHashMap mScheduledNotifications -> g
    com.unity.androidnotifications.UnityNotificationBackgroundThread mBackgroundThread -> d
    java.util.Random mRandom -> e
    int mExactSchedulingSetting -> i
    com.unity.androidnotifications.UnityNotificationManager mUnityNotificationManager -> j
    java.util.HashSet mVisibleNotifications -> f
    com.unity.androidnotifications.NotificationCallback mNotificationCallback -> h
    android.app.Activity mActivity -> b
    java.lang.Class mOpenActivity -> c
    46:57:void <init>() -> <init>
    388:412:void performNotificationScheduling(int,android.app.Notification$Builder,boolean) -> A
    532:536:void saveNotification(android.app.Notification,boolean) -> B
    654:658:void saveScheduledNotificationIDs(java.util.Set) -> C
    430:433:void scheduleAlarmWithNotification(android.app.Notification$Builder) -> D
    415:427:void scheduleAlarmWithNotification(android.app.Notification$Builder,android.content.Intent,long) -> E
    602:613:void scheduleNotificationIntentAlarm(long,long,android.app.PendingIntent) -> F
    927:969:void setupBigPictureStyle(android.app.Notification$Builder) -> G
    436:453:android.app.Notification buildNotificationForSending(java.lang.Class,android.app.Notification$Builder) -> a
    163:169:int areNotificationsEnabled() -> areNotificationsEnabled
    511:513:android.content.Intent buildNotificationIntent() -> b
    580:592:boolean canScheduleExactAlarms(android.app.AlarmManager) -> c
    596:597:boolean canScheduleExactAlarms() -> canScheduleExactAlarms
    690:691:void cancelAllNotifications() -> cancelAllNotifications
    645:646:void cancelAllPendingNotificationIntents() -> cancelAllPendingNotificationIntents
    685:686:void cancelDisplayedNotification(int) -> cancelDisplayedNotification
    662:663:void cancelPendingNotification(int) -> cancelPendingNotification
    639:640:boolean checkIfPendingNotificationIsRegistered(int) -> checkIfPendingNotificationIsRegistered
    617:634:int checkNotificationStatus(int) -> checkNotificationStatus
    862:902:android.app.Notification$Builder createNotificationBuilder(java.lang.String) -> createNotificationBuilder
    667:675:void cancelPendingNotificationIntent(int) -> d
    315:335:void deleteNotificationChannel(java.lang.String) -> deleteNotificationChannel
    184:194:void deleteNotificationChannelGroup(java.lang.String) -> deleteNotificationChannelGroup
    678:681:void deleteExpiredNotificationIntent(java.lang.String) -> e
    791:813:void finalizeNotificationForDisplay(android.app.Notification$Builder) -> f
    472:507:java.util.Set findInvalidNotificationIds(java.util.Set) -> g
    255:290:com.unity.androidnotifications.NotificationChannelWrapper getNotificationChannel(java.lang.String) -> getNotificationChannel
    993:997:java.lang.String getNotificationChannelId(android.app.Notification) -> getNotificationChannelId
    338:359:com.unity.androidnotifications.NotificationChannelWrapper[] getNotificationChannels() -> getNotificationChannels
    774:781:java.lang.Integer getNotificationColor(android.app.Notification) -> getNotificationColor
    1007:1025:android.app.Notification getNotificationFromIntent(android.content.Intent) -> getNotificationFromIntent
    785:787:int getNotificationGroupAlertBehavior(android.app.Notification) -> getNotificationGroupAlertBehavior
    154:154:android.app.NotificationManager getNotificationManager() -> getNotificationManager
    136:142:com.unity.androidnotifications.UnityNotificationManager getNotificationManagerImpl(android.app.Activity,com.unity.androidnotifications.NotificationCallback) -> getNotificationManagerImpl
    158:158:int getTargetSdk() -> getTargetSdk
    364:369:int generateUniqueId() -> h
    517:520:android.app.PendingIntent getActivityPendingIntent(int,android.content.Intent,int) -> i
    147:149:android.os.Bundle getAppMetadata() -> j
    524:527:android.app.PendingIntent getBroadcastPendingIntent(int,android.content.Intent,int) -> k
    816:826:java.lang.Object getIcon(java.lang.String) -> l
    830:836:java.lang.Object getIconForUri(java.lang.String) -> m
    840:847:java.lang.Object getIconFromResources(java.lang.String,boolean) -> n
    123:132:com.unity.androidnotifications.UnityNotificationManager getNotificationManagerImpl(android.content.Context) -> o
    698:699:void onReceive(android.content.Context,android.content.Intent) -> onReceive
    702:747:void onReceive(android.content.Intent) -> onReceive
    1029:1059:java.lang.Object getNotificationOrBuilderForIntent(android.content.Intent) -> p
    648:651:java.util.Set getScheduledNotificationIDs() -> q
    251:251:java.lang.String getSharedPrefsNameByChannelId(java.lang.String) -> r
    208:247:void registerNotificationChannel(java.lang.String,java.lang.String,int,java.lang.String,boolean,boolean,boolean,boolean,long[],int,java.lang.String) -> registerNotificationChannel
    173:181:void registerNotificationChannelGroup(java.lang.String,java.lang.String,java.lang.String) -> registerNotificationChannelGroup
    539:539:java.lang.String getSharedPrefsNameByNotificationId(java.lang.String) -> s
    373:384:int scheduleNotification(android.app.Notification$Builder,boolean) -> scheduleNotification
    972:980:void setNotificationColor(android.app.Notification$Builder,int) -> setNotificationColor
    988:990:void setNotificationGroupAlertBehavior(android.app.Notification$Builder,int) -> setNotificationGroupAlertBehavior
    907:911:void setNotificationIcon(android.app.Notification$Builder,java.lang.String,java.lang.String) -> setNotificationIcon
    983:985:void setNotificationUsesChronometer(android.app.Notification$Builder,boolean) -> setNotificationUsesChronometer
    915:924:void setupBigPictureStyle(android.app.Notification$Builder,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> setupBigPictureStyle
    1064:1081:void showNotificationSettings(java.lang.String) -> showNotificationSettings
    89:121:void initialize(android.app.Activity,com.unity.androidnotifications.NotificationCallback) -> t
    1001:1003:boolean isInForeground() -> u
    852:856:android.graphics.Bitmap loadBitmap(java.lang.String) -> v
    543:575:java.util.List loadSavedNotifications() -> w
    296:311:com.unity.androidnotifications.NotificationChannelWrapper notificationChannelToWrapper(java.lang.Object) -> x
    751:771:void notify(int,android.app.Notification) -> y
    457:469:void performNotificationHousekeeping(java.util.Set) -> z
com.unity.androidnotifications.UnityNotificationRestartOnBootReceiver -> com.unity.androidnotifications.UnityNotificationRestartOnBootReceiver:
    16:16:void <init>() -> <init>
    26:42:void rescheduleSavedNotifications(android.content.Context) -> a
    20:23:void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.unity.androidnotifications.UnityNotificationUtilities -> com.unity.androidnotifications.e:
    byte[] UNITY_MAGIC_NUMBER_PARCELLED -> b
    byte[] UNITY_MAGIC_NUMBER -> a
    50:51:void <clinit>() -> <clinit>
    42:42:void <init>() -> <init>
    220:231:java.lang.Object deserializeNotification(android.content.Context,android.content.SharedPreferences) -> a
    238:248:java.lang.Object deserializeNotification(android.content.Context,byte[]) -> b
    289:410:android.app.Notification$Builder deserializeNotificationCustom(android.content.Context,java.io.DataInputStream) -> c
    270:284:android.app.Notification deserializeNotificationParcelable(java.io.DataInputStream) -> d
    488:511:android.os.Parcelable deserializeParcelable(java.io.DataInputStream) -> e
    477:484:java.lang.String deserializeString(java.io.DataInputStream) -> f
    415:473:android.app.Notification$Builder deserializedFromOldIntent(android.content.Context,byte[]) -> g
    59:73:int findResourceIdInContextByName(android.content.Context,java.lang.String) -> h
    521:588:java.lang.Class getOpenAppActivity(android.content.Context) -> i
    592:592:boolean isUnityActivity(java.lang.String) -> j
    253:264:boolean readAndCheckMagicNumber(java.io.DataInputStream,byte[]) -> k
    597:609:android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification) -> l
    613:652:android.app.Notification$Builder recoverBuilderCustom(android.content.Context,android.app.Notification) -> m
    88:117:void serializeNotification(android.content.SharedPreferences,android.app.Notification,boolean) -> n
    140:187:boolean serializeNotificationCustom(android.app.Notification,java.io.DataOutputStream) -> o
    121:135:boolean serializeNotificationParcel(android.content.Intent,java.io.DataOutputStream) -> p
    203:216:byte[] serializeParcelable(android.os.Parcelable) -> q
    192:199:void serializeString(java.io.DataOutputStream,java.lang.String) -> r
com.unity3d.JavaPluginPreloader -> c.a:
    int $r8$clinit -> a
    4:6:void <clinit>() -> <clinit>
    9:17:void loadJavaClass(java.lang.String) -> a
com.unity3d.adaptiveperformance.samsung.GameLoadBooster -> d.a:
    com.samsung.android.gamesdk.GameSDKManager manager -> a
    java.lang.Boolean startupBoostEnabled -> b
    11:16:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    47:71:boolean checkStartupBoostEnabled() -> a
    20:36:boolean enableBoost() -> b
    41:43:boolean isStartupBoostEnabled() -> c
com.unity3d.player.BuildConfig -> com.unity3d.player.BuildConfig:
    7:7:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
com.unity3d.player.E -> com.unity3d.player.E:
    int -$$Nest$sfgeta() -> a
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sfgetb() -> b
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sfgetc() -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.F -> com.unity3d.player.F:
    android.content.Context -$$Nest$fgeta(com.unity3d.player.F) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:void a(android.widget.EditText,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int) -> a
    com.unity3d.player.UnityPlayer -$$Nest$fgetb(com.unity3d.player.F) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.F,java.lang.String,boolean) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.String -$$Nest$mb(com.unity3d.player.F) -> d
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.HFPStatus -> com.unity3d.player.HFPStatus:
    boolean -$$Nest$fgetc(com.unity3d.player.HFPStatus) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.media.AudioManager -$$Nest$fgetd(com.unity3d.player.HFPStatus) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgete(com.unity3d.player.HFPStatus) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:void clearHFPStat() -> clearHFPStat
    void -$$Nest$fpute(com.unity3d.player.HFPStatus,boolean) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputf(com.unity3d.player.HFPStatus,com.unity3d.player.HFPStatus$a) -> e
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.HFPStatus$1 -> com.unity3d.player.HFPStatus$1:
    1:2:void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.unity3d.player.K -> com.unity3d.player.K:
    1:2:void a(java.lang.String) -> a
com.unity3d.player.L -> com.unity3d.player.L:
    1:1:void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    1:3:void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
com.unity3d.player.M -> com.unity3d.player.M:
    com.unity3d.player.a -$$Nest$fgeta(com.unity3d.player.M) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.UnityPlayer -$$Nest$fgetb(com.unity3d.player.M) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    1:3:void b() -> b
    com.unity3d.player.z -$$Nest$fgetc(com.unity3d.player.M) -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.NetworkConnectivityNougat -> com.unity3d.player.NetworkConnectivityNougat:
    void -$$Nest$fputb(com.unity3d.player.NetworkConnectivityNougat,int) -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.P -> com.unity3d.player.P:
    void -$$Nest$fputb(com.unity3d.player.P,boolean) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.Q -> com.unity3d.player.Q:
    1:2:void doCleanUp() -> doCleanUp
    1:3:void onPrepared(android.media.MediaPlayer) -> onPrepared
    1:1:void onVideoSizeChanged(android.media.MediaPlayer,int,int) -> onVideoSizeChanged
    1:1:void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
com.unity3d.player.ReflectionHelper -> com.unity3d.player.ReflectionHelper:
    long -$$Nest$sfgetb() -> a
      # {"id":"com.android.tools.r8.synthesized"}
    0:2:boolean a(com.unity3d.player.ReflectionHelper$b) -> a
    2:4:void a(com.unity3d.player.ReflectionHelper$b,java.lang.reflect.Member) -> a
    void -$$Nest$smnativeProxyFinalize(long) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$smnativeProxyInvoke(long,java.lang.String,java.lang.Object[]) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smnativeProxyLogJNIInvokeException(long) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:void setNativeExceptionOnProxy(java.lang.Object,long,boolean) -> setNativeExceptionOnProxy
com.unity3d.player.ReflectionHelper$a -> com.unity3d.player.ReflectionHelper$a:
    void -$$Nest$fputd(com.unity3d.player.ReflectionHelper$a,long) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fpute(com.unity3d.player.ReflectionHelper$a,boolean) -> b
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.ReflectionHelper$b -> com.unity3d.player.ReflectionHelper$b:
    int -$$Nest$fgetd(com.unity3d.player.ReflectionHelper$b) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer -> com.unity3d.player.UnityPlayer:
    void -$$Nest$mnativeSendSurfaceChangedEvent(com.unity3d.player.UnityPlayer) -> A
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputArea(com.unity3d.player.UnityPlayer,int,int,int,int) -> B
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputSelection(com.unity3d.player.UnityPlayer,int,int) -> C
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputString(com.unity3d.player.UnityPlayer,java.lang.String) -> D
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetKeyboardIsVisible(com.unity3d.player.UnityPlayer,boolean) -> E
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetLaunchURL(com.unity3d.player.UnityPlayer,java.lang.String) -> F
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputCanceled(com.unity3d.player.UnityPlayer) -> G
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputClosed(com.unity3d.player.UnityPlayer) -> H
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputLostFocus(com.unity3d.player.UnityPlayer) -> I
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mshutdown(com.unity3d.player.UnityPlayer) -> J
      # {"id":"com.android.tools.r8.synthesized"}
    android.app.Activity -$$Nest$fgetmActivity(com.unity3d.player.UnityPlayer) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.content.Context -$$Nest$fgetmContext(com.unity3d.player.UnityPlayer) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.M -$$Nest$fgetmGlView(com.unity3d.player.UnityPlayer) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:void checkResumePlayer() -> checkResumePlayer
    int -$$Nest$fgetmInitialScreenOrientation(com.unity3d.player.UnityPlayer) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    1:3:void destroy() -> destroy
    boolean -$$Nest$fgetmMainDisplayOverride(com.unity3d.player.UnityPlayer) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgetmNaturalOrientation(com.unity3d.player.UnityPlayer) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.G -$$Nest$fgetm_SplashScreen(com.unity3d.player.UnityPlayer) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.IUnityPlayerLifecycleEvents -$$Nest$fgetm_UnityPlayerLifecycleEvents(com.unity3d.player.UnityPlayer) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputmQuitting(com.unity3d.player.UnityPlayer,boolean) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputmVideoPlayerProxy(com.unity3d.player.UnityPlayer,com.unity3d.player.Y) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputm_SplashScreen(com.unity3d.player.UnityPlayer,com.unity3d.player.G) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mDisableStaticSplashScreen(com.unity3d.player.UnityPlayer) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mfinish(com.unity3d.player.UnityPlayer) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$mgetAutoReportFullyDrawnEnabled(com.unity3d.player.UnityPlayer) -> n
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:void newIntent(android.content.Intent) -> newIntent
    boolean -$$Nest$mgetHaveAndroidWindowSupport(com.unity3d.player.UnityPlayer) -> o
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$mgetSplashEnabled(com.unity3d.player.UnityPlayer) -> p
      # {"id":"com.android.tools.r8.synthesized"}
    1:4:void pauseUnity() -> pauseUnity
    void -$$Nest$mnativeFocusChanged(com.unity3d.player.UnityPlayer,boolean) -> q
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$mnativeIsAutorotationOn(com.unity3d.player.UnityPlayer) -> r
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeLowMemory(com.unity3d.player.UnityPlayer) -> s
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:void sendSurfaceChangedEvent() -> sendSurfaceChangedEvent
    void -$$Nest$mnativeMuteMasterAudio(com.unity3d.player.UnityPlayer,boolean) -> t
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeOrientationChanged(com.unity3d.player.UnityPlayer,int,int) -> u
      # {"id":"com.android.tools.r8.synthesized"}
    1:7:boolean updateDisplayInternal(int,android.view.Surface) -> updateDisplayInternal
    boolean -$$Nest$mnativePause(com.unity3d.player.UnityPlayer) -> v
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeRecreateGfxState(com.unity3d.player.UnityPlayer,int,android.view.Surface) -> w
      # {"id":"com.android.tools.r8.synthesized"}
    1:6:void windowFocusChanged(boolean) -> windowFocusChanged
    boolean -$$Nest$mnativeRender(com.unity3d.player.UnityPlayer) -> x
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeReportKeyboardConfigChanged(com.unity3d.player.UnityPlayer) -> y
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeResume(com.unity3d.player.UnityPlayer) -> z
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$A-IA -> com.unity3d.player.a0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$C-IA -> com.unity3d.player.b0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$D-IA -> com.unity3d.player.c0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$p -> com.unity3d.player.UnityPlayer$p:
    1:2:void onOrientationChanged(int) -> onOrientationChanged
com.unity3d.player.UnityPlayerActivity -> com.unity3d.player.UnityPlayerActivity:
    15:15:void <init>() -> <init>
    154:156:boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    139:141:void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    34:43:void onCreate(android.os.Bundle) -> onCreate
    67:69:void onDestroy() -> onDestroy
    163:163:boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    161:161:boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    160:160:boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    122:124:void onLowMemory() -> onLowMemory
    60:62:void onNewIntent(android.content.Intent) -> onNewIntent
    98:106:void onPause() -> onPause
    111:117:void onResume() -> onResume
    87:93:void onStart() -> onStart
    77:83:void onStop() -> onStop
    162:162:boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    129:134:void onTrimMemory(int) -> onTrimMemory
    52:52:void onUnityPlayerQuitted() -> onUnityPlayerQuitted
    47:48:void onUnityPlayerUnloaded() -> onUnityPlayerUnloaded
    146:148:void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    28:28:java.lang.String updateUnityCommandLineArguments(java.lang.String) -> updateUnityCommandLineArguments
com.unity3d.player.Y -> com.unity3d.player.Y:
    com.unity3d.player.UnityPlayer -$$Nest$fgeta(com.unity3d.player.Y) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.content.Context -$$Nest$fgetb(com.unity3d.player.Y) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.Semaphore -$$Nest$fgetd(com.unity3d.player.Y) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.locks.Lock -$$Nest$fgete(com.unity3d.player.Y) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.Q -$$Nest$fgetf(com.unity3d.player.Y) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgeti(com.unity3d.player.Y) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputf(com.unity3d.player.Y,com.unity3d.player.Q) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputg(com.unity3d.player.Y,int) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputi(com.unity3d.player.Y,boolean) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.Y) -> j
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.a.a -> e.a:
com.unity3d.player.c -> com.unity3d.player.c:
    java.util.HashSet -$$Nest$fgeta(com.unity3d.player.c) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:5:void onStateUpdate(java.lang.Object) -> onStateUpdate
com.unity3d.player.e -> com.unity3d.player.e:
    1:1:void onSuccess(java.lang.Object) -> onSuccess
com.unity3d.player.f -> com.unity3d.player.f:
    1:4:void onComplete(com.google.android.gms.tasks.Task) -> onComplete
com.unity3d.player.i -> com.unity3d.player.i:
    com.google.android.play.core.assetpacks.AssetPackManager -$$Nest$fgeta(com.unity3d.player.i) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:java.lang.Object a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback) -> a
    java.util.HashSet -$$Nest$fgetb(com.unity3d.player.i) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$fgetc(com.unity3d.player.i) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputc(com.unity3d.player.i,java.lang.Object) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.i -$$Nest$sfgetd() -> e
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sma(java.lang.Throwable) -> f
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.s -> com.unity3d.player.s:
    com.unity3d.player.a.a -$$Nest$fgeta(com.unity3d.player.s) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:3:void a() -> a
    0:9:boolean a(android.content.Context,int,int,int,int,int,android.view.Surface) -> a
    android.hardware.camera2.CameraDevice -$$Nest$fgetb(com.unity3d.player.s) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    android.util.Range -$$Nest$fgetn(com.unity3d.player.s) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    android.media.Image -$$Nest$fgetp(com.unity3d.player.s) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    android.hardware.camera2.CaptureRequest$Builder -$$Nest$fgetq(com.unity3d.player.s) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$fgets(com.unity3d.player.s) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    android.view.Surface -$$Nest$fgetv(com.unity3d.player.s) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputb(com.unity3d.player.s,android.hardware.camera2.CameraDevice) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputp(com.unity3d.player.s,android.media.Image) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputq(com.unity3d.player.s,android.hardware.camera2.CaptureRequest$Builder) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputr(com.unity3d.player.s,android.hardware.camera2.CameraCaptureSession) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.s,android.hardware.camera2.CameraDevice) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.s,java.lang.Object) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mf(com.unity3d.player.s) -> n
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.Semaphore -$$Nest$sfgetD() -> o
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.v -> com.unity3d.player.v:
    1:1:void run() -> run
com.unity3d.player.x -> com.unity3d.player.x:
    com.unity3d.player.IPermissionRequestCallbacks -$$Nest$fgeta(com.unity3d.player.x) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:2:void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
